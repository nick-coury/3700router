#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math, copy

class Router:
    # enum: cust | prov | peer
    relations = {}

    # list of UDP sockets 
    sockets = {}

    # list of ports in router, each port has a UDP socket 
    ports = {}

    # forwarding table holds an array of dictionaries {key : value}
    # key - ip address of source
    # value - dictionary:  
    #               - "network":    "<network prefix>",             # Example: 12.0.0.0
    #               - "netmask":    "<associated subnet netmask>",  # Example: 255.0.0.0
    #               - "localpref":  "<integer>",                    # Example: 100
    #               - "selfOrigin": "<true|false>",
    #               - "ASPath":     "{<nid>, [nid], ...}",          # Examples: [1] or [3, 4] or [1, 4, 3]
    #               - "origin":     "<IGP|EGP|UNK>"            (ip address of destination network , destination network netmask)
    fwd_table = []

    # list of update messages received by the router 
    announcements = []

    # list of withdraw messages
    revocations = []

    def __init__(self, asn, connections):
        print("Router at AS %s starting up" % asn)
        self.asn = asn
        for relationship in connections:
            port, neighbor, relation = relationship.split("-")
            self.sockets[neighbor] = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            self.sockets[neighbor].bind(('localhost', 0))
            self.ports[neighbor] = int(port)
            self.relations[neighbor] = relation

            self.send(neighbor, json.dumps({ "type": "handshake", "src": self.our_addr(neighbor), "dst": neighbor, "msg": {}  }))

    def our_addr(self, dst):
        quads = list(int(qdn) for qdn in dst.split('.'))
        quads[3] = 1
        return "%d.%d.%d.%d" % (quads[0], quads[1], quads[2], quads[3])

    def send(self, network, message):
        self.sockets[network].sendto(message.encode('utf-8'), ('localhost', self.ports[network]))

    #   1. The entry with the highest localpref wins. If the localprefs are equal
    #   2. The entry with selfOrigin as true wins. If all selfOrigins are the equal
    #   3. The entry with the shortest ASPath wins. If multiple entries have the shortest length
    #   4. The entry with the best origin wins, were IGP > EGP > UNK. If multiple entries have the best origin
    #   5. The entry from the neighbor router (i.e., the src of the update message) with the lowest IP address
    def get_best_ip(self, matching_ips):
        best_ip_dict = matching_ips[0]
        best_ip = best_ip_dict["peer"]

        for curr_ip_dict in matching_ips:
            curr_ip = curr_ip_dict["peer"]

            # check which aspect is better, only move on if they're both equal 
            # check the local prefs of the two messages 
            if(best_ip_dict["localpref"] < curr_ip_dict["localpref"]): 
                best_ip = curr_ip
            elif(best_ip_dict["localpref"] > curr_ip_dict["localpref"]): 
                best_ip = best_ip
            
            # check the self origins of both messages 
            elif(best_ip_dict["selfOrigin"] == False and curr_ip_dict["selfOrigin"] == True): # make sure 1: true 2: false 
                best_ip = curr_ip
            elif(best_ip_dict["selfOrigin"] == True and curr_ip_dict["selfOrigin"] == False): # make sure 1: false 2: true 
                best_ip = best_ip
            
            # check the aspaths of both messages 
            elif(len(best_ip_dict["ASPath"]) > len(curr_ip_dict["ASPath"])):
                best_ip = curr_ip    
            elif(len(best_ip_dict["ASPath"]) < len(curr_ip_dict["ASPath"])):
                best_ip = best_ip  
            
            # check they do not have the same origin and make sure the 
            elif((best_ip_dict["origin"] != "IGP" and curr_ip_dict == "IGP") or (best_ip_dict["origin"] == "UNK" and curr_ip_dict["origin"] == "EGP")):
                best_ip = curr_ip
            elif((curr_ip_dict["origin"] != "IGP" and best_ip_dict == "IGP") or (curr_ip_dict["origin"] == "UNK" and curr_ip_dict["origin"] == "EGP")):
                best_ip = best_ip
            
            # catch all, if equal, send the global best ip (should never happen)
            elif(best_ip > curr_ip):
                best_ip = curr_ip
        return best_ip
    
    # Updates the forwarding table given an update message    
    def update_fwd_table(self, msg_dict):
        new_entry = copy.deepcopy(msg_dict["msg"])
        new_entry["peer"] = msg_dict["src"]
        self.fwd_table.append(new_entry)

    # Handles logic for update messages
    def update(self, msg_dict, srcif):
        # save a copy of the announcement from the neighbor 
        self.announcements.append(copy.deepcopy(msg_dict))
        # add entry to fwd table
        self.update_fwd_table(msg_dict)

        # Remove private info from the message 
        extracted_network_msg = copy.deepcopy(msg_dict["msg"])
        del extracted_network_msg["origin"]
        del extracted_network_msg["selfOrigin"]
        del extracted_network_msg["localpref"]

        # add ourselves to the ASPath 
        extracted_network_msg["ASPath"].insert(0, self.asn)

        # Update received from a customer: send updates to all other neighbors
        if(self.relations[srcif] == "cust"):
            for n in self.sockets:
                # so we don't send a message back to where it came from
                if(n != srcif):
                    new_msg = json.dumps({"src": self.our_addr(n), 
                    "dst": n, 
                    "type": "update",     
                    "msg": extracted_network_msg 
                    })
                    self.send(n, new_msg)
        # Update received from a peer or a provider: only send updates to your customers
        else:
            for n in self.sockets:
                if self.relations[n] == "cust":
                    new_msg = json.dumps({"src": self.our_addr(n), 
                    "dst": n, 
                    "type": "update",     
                    "msg": extracted_network_msg 
                    })
                    self.send(n, new_msg)

        self.aggregate()

    def all_else_same(self, n1, n2):
        if n1["localpref"] != n2["localpref"]:
            return False 
        elif n1["selfOrigin"] != n2["selfOrigin"]:
            return False 
        elif n1["localpref"] != n2["localpref"]:
            return False
        elif n1["ASPath"] != n2["ASPath"]:
            return False
        elif n1["origin"] != n2["origin"]:
            return False
        elif n1["netmask"] != n2["netmask"]:
            return False
        else: 
            return True   

    # ATTRIBUTION : https://www.geeksforgeeks.org/binary-decimal-vice-versa-python/ 
    # Our intent is to manually transform binary numbers (without the python xb0) into decimal numbers
    # This is a trivial method that handles conversion without any weird xb0
    def binary_to_decimal(self, binary):
        decimal, i = 0, 0
        while(binary != 0):
            dec = binary % 10
            decimal = decimal + dec * pow(2, i)
            binary = binary//10
            i += 1
        return (decimal)

    # takes in a netmask length -> convert to the binary version -> convert to decimal netmask address 
    # if netmask len = 9 -> bin = 11111111.11111111.10000000.00000000 -> 255.255.128.0 
    def make_netmask(self, len):
        bin_cidr1 = ""
        bin_cidr2 = ""
        bin_cidr3 = ""
        bin_cidr4 = ""
        for i in range(8):
            if(i < len):
                bin_cidr1 += "1"
            else:
                bin_cidr1 += "0"
        octet1 = self.binary_to_decimal(int(bin_cidr1))

        for i in range(8, 16):
            if(i < len):
                bin_cidr2 += "1"
            else:
                bin_cidr2 += "0"
        octet2 = self.binary_to_decimal(int(bin_cidr2))
        
        for i in range(16, 24):
            if(i < len):
                bin_cidr3 += "1"
            else:
                bin_cidr3 += "0"
        octet3 = self.binary_to_decimal(int(bin_cidr3))

        for i in range(24, 32):
            if(i < len):
                bin_cidr4 += "1"
            else:
                bin_cidr4 += "0"
        octet4 = self.binary_to_decimal(int(bin_cidr4))
        
        return str(octet1) + "." + str(octet2) + "." + str(octet3) + "." + str(octet4)


    # handle aggregation:
    # loop thru fwd_table 
    #   loop thru fwd_table (except its own entry)
    #       if (subnet mask of current with cidr len - 1) == (subnet mask of next with cidr len - 1) and all else same
    #           aggregate by removing the next entry, and decrementing the cidr len (changes the last quad in the subnet mask)
    def aggregate(self):
        for curr_entry in self.fwd_table:
            for compare_entry in self.fwd_table:
                if(curr_entry != compare_entry):
                    if(self.all_else_same(curr_entry, compare_entry)):
                        # calculate the new netmask length (old netmask len - 1)
                        new_netmask_len = self.get_cidr_len(self.to_binary(compare_entry["netmask"])) - 1
                        # generate a new netmask based on the new netmask length
                        new_netmask = self.make_netmask(new_netmask_len)
                        # save off the current entry's netmask
                        curr_cidr_addr = self.netmask_this(curr_entry["network"], new_netmask)
                        # save off the compare to entry's netmask
                        compare_cidr_addr = self.netmask_this(compare_entry["network"], new_netmask)
                        
                        # If the netmasks are the same (and everything else is too)
                        if(curr_cidr_addr[0:new_netmask_len] == compare_cidr_addr[0:new_netmask_len]):
                            # if you aggregate, remove the entry with the larger network ip
                            if(curr_entry["network"] < compare_entry["network"]):
                                self.fwd_table.remove(compare_entry)
                                curr_entry["netmask"] = new_netmask
                                return self.aggregate()
                                
                            else:
                                self.fwd_table.remove(curr_entry)
                                compare_entry["netmask"] = new_netmask
                                return self.aggregate()
        return
                                
    # network comes in as XXXX.XXXX.XXXX.XXXX -> 10101010101010101010 <- 4 quads worth of binary in str form
    def to_binary(self, network):
        str_bin_network = ""
        quads = list(int(qdn) for qdn in network.split('.'))

        # Transform each quad into binary, omitting the leading "0b" and filling leading 0's
        first_quad = str(bin(quads[0]))
        first_final =  first_quad[2:len(first_quad)].zfill(8)

        second_quad = str(bin(quads[1]))
        second_final = second_quad[2:len(second_quad)].zfill(8)

        third_quad = str(bin(quads[2]))
        third_final = third_quad[2:len(third_quad)].zfill(8)

        fourth_quad = str(bin(quads[3]))
        fourth_final = fourth_quad[2:len(fourth_quad)].zfill(8)

        str_bin_network = first_final + second_final + third_final + fourth_final

        return str_bin_network
        
    
    # Given a string binary netmask, return the number of 1's in the list
    # returns the /X number in CIDR addresses 
    def get_cidr_len(self, netmask):
        ones = 0
        #print("netmask: ", netmask)
        #self.to_binary(netmask)
        for i in range(32):
            if netmask[i] == "1":
                ones += 1
        return ones
    
    # network comes in as [123.123.123.123] [255.255.0.0] -> [bin bin 0 0] (netmasked ip)
    def netmask_this(self, network, netmask): 
        network_bin = self.to_binary(network)
        netmask_bin = self.to_binary(netmask)
        final = ""
        for i in range(32):
            if network_bin[i] == "1" and netmask_bin[i] == "1":
                final += "1"
            else: 
                final += "0"
        return final


    # Takes in a destination ip and returns a list of ALL matching ips with the longest matching prefix
    def longest_prefix_match(self, dst):
        # loop through the fwd table 
        #   if dest corresponds to current fwd table entry's network + netmask
        #       find the longest prefix
        #       if shorter than longest prefix -> don't add to list
        #       if equal to longest prefix -> add to list
        #       if longer than longest prefix -> drop current list, start new one
        matching_ips = []
        longest_prefix_length = 0
        for n in self.fwd_table:
            cidr_len = self.get_cidr_len(self.to_binary(n["netmask"]))

            if self.netmask_this(dst, n["netmask"])[0:cidr_len] == self.netmask_this(n["network"], n["netmask"])[0:cidr_len]:
                if cidr_len == longest_prefix_length:
                    matching_ips.append(copy.deepcopy(n))
                elif cidr_len > longest_prefix_length:
                    longest_prefix_length = cidr_len
                    matching_ips = []
                    matching_ips.append(copy.deepcopy(n))
       
        return matching_ips

    # Logic for handling data messages
    def data(self, msg_dict, srcif):
        # in the future this will be where we handle data forwarding logic 
        # if our router hears a data message,  source is the dst in the fwd table

        matching_ips = []
        
        # new serialized data message to send 
        new_msg = json.dumps({"src": msg_dict["src"], 
                "dst": msg_dict["dst"],  
                "type": "data", 
                "msg": msg_dict["msg"],
        })
        
        # Select best network
        #   0. Longest prefix match
        # if no match and legal to forward then send         
        matching_ips = self.longest_prefix_match(msg_dict["dst"])

        if len(matching_ips) != 0:  
            final_ip = self.get_best_ip(matching_ips)
            if ((self.relations[srcif] == "cust") or (self.relations[final_ip] == "cust")) :
                self.send(final_ip, new_msg)
        # No route message
        else:
            new_msg = json.dumps({"src": self.our_addr(srcif), 
            "dst": msg_dict["src"], 
            "type": "no route", 
            "msg": {},
            })
            self.send(srcif, new_msg)
        
    # Logic for handling dump messages 
    def dump(self, msg_dict):
        table_msg = json.dumps({"src": msg_dict["dst"], 
        "dst": msg_dict["src"], # the message's new destination is the original message's source 
        "type": "table", 
        "msg": self.fwd_table,
        })
        self.send(msg_dict["src"], table_msg)

    # R
    def reset_fwd_table(self):
        self.fwd_table = []
        for msg in self.announcements:
            self.update_fwd_table(msg)
        for msg in self.revocations :
            self.remove_from_fwd_table(msg) 
        self.aggregate()       

    # Remove an entry from the fwd table given a withdraw message
    def remove_from_fwd_table(self, msg_dict):
        rmv_list = copy.deepcopy(msg_dict["msg"])
        for to_remove in rmv_list:
            for n in self.fwd_table:
                if n["peer"] == msg_dict["src"] and n["netmask"] == to_remove["netmask"] and n["network"] == to_remove["network"]:
                    self.fwd_table.remove(n)
                    return True
        return False

    # Logic for handling withdraw messages
    def withdraw(self, msg_dict, srcif):
        # First save a copy of the withdraw message 
        self.revocations.append(copy.deepcopy(msg_dict))
        
        if not self.remove_from_fwd_table(msg_dict):
            self.reset_fwd_table()

        # Revocation received from a customer: send updates to all other neighbors
        if(self.relations[srcif] == "cust"):
            for n in self.sockets:
                # so we don't send a message back to where it came from
                if(n != srcif):
                    new_msg = json.dumps({"src": self.our_addr(n), 
                    "dst": n, 
                    "type": "withdraw",
                    "msg": msg_dict["msg"]
                    })
                    self.send(n, new_msg)

        # Revocation received from a peer or a provider: only send updates to your customers
        else:
            for n in self.sockets:
                if self.relations[n] == "cust":
                    new_msg = json.dumps({"src": self.our_addr(n), 
                    "dst": n, 
                    "type": "witdraw",     
                    "msg": msg_dict["msg"]
                    })
                    self.send(n, new_msg)

    def run(self):
        while True:
            socks = select.select(self.sockets.values(), [], [], 0.1)[0]
            
            for conn in socks:
                k, addr = conn.recvfrom(65535)
                srcif = None

                for sock in self.sockets:
                    if self.sockets[sock] == conn:
                        srcif = sock
                        break
                    
                # a specific message for the current socket in the list of sockets 
                msg = k.decode('utf-8')
                msg_dict = json.loads(msg)

                # Choose what to do with the received messaged based on the type
                # if an update message, copy, add to fwd, send to neighbors
                if(msg_dict["type"] == "update"):
                    self.update(msg_dict, srcif)
                # if a data message, forward (send) the message to its dest    
                elif(msg_dict["type"] == "data"):
                    self.data(msg_dict, srcif)
                # if a dump message, reply with our forwarding table
                elif(msg_dict["type"] == "dump"):
                    self.dump(msg_dict)
                # if a withdraw message, forward copies of the revocation announcement 
                elif(msg_dict["type"] == "withdraw"):
                    self.withdraw(msg_dict, srcif)             
    
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='route packets')
    parser.add_argument('asn', type=int, help="AS number of this router")
    parser.add_argument('connections', metavar='connections', type=str, nargs='+', help="connections")
    args = parser.parse_args()
    router = Router(args.asn, args.connections)
    router.run()
